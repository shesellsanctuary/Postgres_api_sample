/* Modules */
const { EOL } = require('os')
const path = require('path')

const { mkdirp, writeFile } = require('fs-extra')
const parser = require('tap-out')

const serialize = require('./serialize.js')

const tapJunit = args => {
  let testCase = null
  const testSuites = []
  const tap = parser()

  /* Helpers */
  const sanitizeString = (str = 'tap') => {
    // In case the user included .xml in the name argument lets get rid of it
    if (str.includes('.xml')) {
      return str.replace('.xml', '').replace(/[^\w-_]/g, '').trim()
    }

    return str.replace(/[^\w-_]/g, '').trim()
  }

  /**
   * Writes the tap.xml file
   * @param  {String} xml the xml string generated by the tap-parser events
   * @param  {Boolean} passing passing boolean to let us know that the tests are passing
   */
  const writeOutput = (xml, passing) => {
    const name = sanitizeString(args.name)

    mkdirp(args.output).then(() => {
      return writeFile(path.join(args.output, `${name}.xml`), xml)
    }).then(() => {
      console.log('Tap-Junit:', `Finished! ${name}.xml created at -- ${args.output}${EOL}`)

      if (!passing) {
        console.error(new Error('Looks like some test suites failed'))
        process.exit(1)
      }
    }).catch(err => {
      console.error(err)

      process.exit(1)
    })
  }

  /**
   * Creates a new test object and pushes it into our suites
   * @param  {String} testInfo Test name
   * @return {Object} Returns the newly created test object
   */
  const newTest = ({ name = '', number }) => {
    const testName = name || sanitizeString(args.name)

    const recordedTest = {
      id: number,
      assertCount: 0,
      asserts: [],
      comments: 0,
      skipCount: 0,
      skipped: false,
      errorCount: 0,
      errors: [],
      failCount: 0,
      failAsserts: [],
      testName
    }

    testSuites.push(recordedTest)

    return recordedTest
  }

  const isSkipped = ({ raw }) => (/#\s?(SKIP)+/).test(raw)

  /* Parser Event listening */

  // This is the ENITRE test event not just the inner asserts
  tap.on('test', res => {
    testCase = newTest(res)
    testCase.skipped = isSkipped(res)
  })

  // Someone used a console.log or t.comment in their tests
  tap.on('comment', res => {
    if (!testCase) {
      testCase = newTest(res)
    }
    testCase.comments++
  })

  // Event for each assert inside the current Test
  tap.on('assert', res => {
    if (!testCase) {
      testCase = newTest(res)
    }
    testCase.assertCount++
    res.skip = isSkipped(res)
    testCase.asserts.push(res)
  })

  // Event for a assert failure
  // Optional param: {assert} which is just the assertion object
  tap.on('fail', assert => {
    testCase.failCount++
    testCase.failAsserts.push(assert)
  })

  tap.on('output', output => {
    const xmlString = serialize(testSuites)

    // Most likely an issue upstream
    if (output.plans.length < 1) {
      return process.exit(1)
    }

    // If an output is specified then let's write our results to it
    if (args.output) {
      return writeOutput(xmlString, output.fail.length === 0)
    }

    return console.log(`${xmlString}${EOL}`)
  })

  return tap
}

module.exports = tapJunit
